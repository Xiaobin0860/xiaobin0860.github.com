<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>乌托邦</title>
    <description></description>
    <link>https://xiaobin0860.github.io/</link>
    <atom:link href="https://xiaobin0860.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 03 Aug 2021 06:47:45 +0000</pubDate>
    <lastBuildDate>Tue, 03 Aug 2021 06:47:45 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Git Proxy</title>
        <description>&lt;h2 id=&quot;http-代理&quot;&gt;HTTP 代理&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git config --global http.proxy 127.0.0.1:1080
git config --global https.proxy 127.0.0.1:1080
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;ssh-代理&quot;&gt;SSH 代理&lt;/h2&gt;

&lt;p&gt;SSH 代理需要在密钥目录&lt;code&gt;~/.ssh&lt;/code&gt;(Windows 下是&lt;code&gt;C:\Users\{UserName}\.ssh&lt;/code&gt;)新建一个&lt;code&gt;config&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;$ cat ~/.ssh/config
Host github.com
    ProxyCommand connect -S 127.0.0.1:1080 %h %p
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20210803.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/git_proxy</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/git_proxy</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>VS Code的使用</title>
        <description>&lt;h2 id=&quot;vs-code-快捷键&quot;&gt;VS Code 快捷键&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;光标移动&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;方向键&lt;/code&gt;: 在&lt;strong&gt;单个字符&lt;/strong&gt;之间移动光标&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Option + 左右方向键&lt;/code&gt;(Windows 上是&lt;code&gt;Ctrl + 左右方向键&lt;/code&gt;): 在&lt;strong&gt;单词&lt;/strong&gt;之间移动光标&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Cmd + 左右方向键&lt;/code&gt;(Windows 上是&lt;code&gt;Home/End&lt;/code&gt;): 把光标移动到行首或者行末&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Option + Shift + \&lt;/code&gt;(Windows 上是&lt;code&gt;Ctrl + Shift + \&lt;/code&gt;): 光标在&lt;strong&gt;代码块&lt;/strong&gt;的始末跳转&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Cmd + 上下方向键&lt;/code&gt;(Windows 上是&lt;code&gt;Ctrl + Home/End&lt;/code&gt;): 光标移动到文档的第一行或者最后一行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文本选择&lt;/p&gt;

    &lt;p&gt;只需要多按一个 Shift 键，就可以在移动光标的同时选中其中的文本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除操作&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;Mac 快捷键&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;Win 快捷键&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;作用&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + Backspace&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Ctrl + Backspace&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;删除光标之前的一个单词&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + Delete&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Ctrl + Delete&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;删除光标之后的一个单词&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Cmd + Backspace&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;删除光标之前的整行内容&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Cmd + Delete&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;删除光标之后的整行内容&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Cmd + Shift + K&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Ctrl + Shift + K&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;删除整行(剪切 Cmd+X 也可用于删除整行)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑操作&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;Mac 快捷键&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;Win 快捷键&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;作用&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Cmd + Enter&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Ctrl + Enter&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;在当前行下面新增一行，然后跳至该行&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Cmd + Shift + Enter&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;在当前行上面新增一行，然后跳至该行&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + ↑&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Alt + ↑&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;将代码向上移动&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + ↓&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Alt + ↓&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;将代码向下移动&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + Shift + ↑&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Alt + Shift + ↑&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;将代码向上复制&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Option + Shift + ↓&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Alt + Shift + ↓&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;将代码向下复制&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自定义快捷键&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;Cmd+K, Cmd+S&lt;/code&gt;(Windows 上是&lt;code&gt;Ctrl+K, Ctrl+S&lt;/code&gt;)打开”Keyboard Shortcuts”窗口修改&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Win &lt;code&gt;Alt + Backspace&lt;/code&gt; 删除光标之前的整行内容(Delete All Left)&lt;/li&gt;
      &lt;li&gt;Win &lt;code&gt;Alt + Delete&lt;/code&gt; 删除光标之后的整行内容(Delete All Right)&lt;/li&gt;
      &lt;li&gt;Win &lt;code&gt;Alt + Shift + ]&lt;/code&gt; 选择括号内所有内容(Select to Bracket)&lt;/li&gt;
      &lt;li&gt;All &lt;code&gt;Ctrl + U&lt;/code&gt; Transform to Uppercase&lt;/li&gt;
      &lt;li&gt;All &lt;code&gt;Ctrl + L&lt;/code&gt; Transform to Lowercase&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20191012.png&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/VSCode</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/VSCode</guid>
        
        
        <category>vscode</category>
        
        <category>editor</category>
        
      </item>
    
      <item>
        <title>用nginx代理phoenix应用</title>
        <description>&lt;h2 id=&quot;upstream-proxy&quot;&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream&quot;&gt;upstream proxy&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginx&quot;&gt;upstream fvlandingpagebygeo_phoenix {
  server 127.0.0.1:8900
}

server {
  server_name fvlandingpagebygeo.com www.fvlandingpagebygeo.com;

  listen 80 default_server;
  listen [::]:80 default_server;

  root /srv/www/fvlandingpagebygeo.com/htdocs;
  index index.html;

  location / {
    # pass the requests on to our proxy
    try_files $uri @proxy;
  }
  
  location @proxy {
    include proxy_params;
    proxy_redirect off;
    proxy_pass http://fvlandingpagebygeo_phoenix;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;phoenix应用作为子目录&quot;&gt;phoenix应用作为子目录&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;nginx配置&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginx&quot;&gt;map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

location ~ /(phx|phoenix) {
  proxy_pass http://127.0.0.1:4000;
  # Proxy Headers
  proxy_redirect off;
  proxy_http_version 1.1;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_set_header X-Cluster-Client-Ip $remote_addr;

  # WebSockets
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Xiaobin0860/phx_umbrella/commit/bf348686bdfd19a39e81fb293ab00974e9ee6471&quot;&gt;phx app修改&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;any compiled assets need to be prefixed with the subdirectory&lt;/li&gt;
  &lt;li&gt;any reference to those assets needs to be prefixed with the subdirectory&lt;/li&gt;
  &lt;li&gt;all links should be prefixed with the subdirector&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://geoffreylessel.com/2016/hosting-a-phoenix-app-in-a-subdirectory-with-nginx/&quot;&gt;Hosting A Phoenix App In A Subdirectory With Nginx&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20190406.jpg&quot; alt=&quot;宝宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/phx_nginx</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/phx_nginx</guid>
        
        
        <category>phoenix</category>
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>Vim Format</title>
        <description>&lt;h2 id=&quot;vim-format&quot;&gt;vim format&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;gg 跳转到第一行&lt;/li&gt;
  &lt;li&gt;shift+v 转到可视模式&lt;/li&gt;
  &lt;li&gt;shift+g 全选&lt;/li&gt;
  &lt;li&gt;按下神奇的 =&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180528.png&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/vim_format</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/vim_format</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Elixir Application Supervisor</title>
        <description>&lt;h2 id=&quot;application-behaviour&quot;&gt;&lt;code&gt;Application&lt;/code&gt; behaviour&lt;/h2&gt;

&lt;p&gt;In Elixir (actually, in Erlang/OTP), an application is a component implementing some specific functionality, that can be started and stopped as a unit, and which can be re-used in other systems.&lt;/p&gt;

&lt;h3 id=&quot;start-and-shutdown&quot;&gt;Start and shutdown&lt;/h3&gt;

&lt;p&gt;Starting an application is done via the “application module callback”, which is a module that defines the &lt;code&gt;start/2&lt;/code&gt; function. The &lt;code&gt;start/2&lt;/code&gt; function should then start a supervisor, which is often called as the top-level supervisor, since it sits at the root of a potentially long supervision tree. When the system is shutting down, all applications shut down their top-level supervisor, which terminates children in the opposite order they are started.&lt;/p&gt;

&lt;h3 id=&quot;application-module-callback&quot;&gt;Application module callback&lt;/h3&gt;

&lt;p&gt;The first step is to pass the module callback in the application definition in the mix.exs file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;def application do
  [mod: {MyApp, []}]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our application now requires the &lt;code&gt;MyApp&lt;/code&gt; module to provide an application callback. This can be done by invoking &lt;code&gt;use Application&lt;/code&gt; in that module and defining a &lt;code&gt;start/2&lt;/code&gt; callback, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;defmodule MyApp do
  use Application

  def start(_type, _args) do
    children = []
    Supervisor.start_link(children, strategy: :one_for_one)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;start/2&lt;/code&gt; typically returns &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt; where &lt;code&gt;pid&lt;/code&gt; identifies the supervision tree and &lt;code&gt;state&lt;/code&gt; is the application state. &lt;code&gt;args&lt;/code&gt; is the second element of the tuple given to the &lt;code&gt;:mod&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;When an application is shutting down, its &lt;code&gt;stop/1&lt;/code&gt; callback is called after the supervision tree has been stopped by the runtime. This callback allows the application to do any final cleanup. The argument is the state returned by &lt;code&gt;start/2&lt;/code&gt;, if it did, or &lt;code&gt;[]&lt;/code&gt; otherwise. The return value of &lt;code&gt;stop/1&lt;/code&gt; is ignored.&lt;/p&gt;

&lt;h2 id=&quot;supervisor-behaviour&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt; behaviour&lt;/h2&gt;

&lt;p&gt;A supervisor is a process which supervises other processes, which we refer to as &lt;code&gt;child processes&lt;/code&gt;. Supervisors are used to build a hierarchical process structure called a &lt;code&gt;supervision tree&lt;/code&gt;. Supervision trees provide fault-tolerance and encapsulate how our applications start and shutdown.&lt;/p&gt;

&lt;p&gt;A supervisor may be started directly with a list of children via &lt;code&gt;start_link/2&lt;/code&gt; or you may define a module-based supervisor that implements the required callbacks.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;As an example, we will define a GenServer that represents a stack. The stack is a small wrapper around lists. It allows us to put an element on the top of the stack, by prepending to the list, and to get the top of the stack by pattern matching.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;defmodule Stack do
  use GenServer

  def start_link(state) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  ## Callbacks

  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [h | t]) do
    {:reply, h, t}
  end

  @impl true
  def handle_cast({:push, h}, t) do
    {:noreply, [h | t]}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now start a supervisor that will start and supervise our stack process. The first step is to define a list of &lt;code&gt;child specifications&lt;/code&gt; that control how each child behaves. Each child specification is a map, as shown below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;children = [
  # The Stack is a child started via Stack.start_link([:hello])
  %{
    id: Stack,
    start: {Stack, :start_link, [[:hello]]}
  }
]

# Now we start the supervisor with the children and a strategy
{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that when starting the GenServer, we are registering it with name Stack, which allows us to call it directly and get what is on the stack:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;GenServer.call(Stack, :pop)
#=&amp;gt; :hello
GenServer.cast(Stack, {:push, :world})
#=&amp;gt; :ok
GenServer.call(Stack, :pop)
#=&amp;gt; :world
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;child-specification&quot;&gt;Child specification&lt;/h3&gt;

&lt;p&gt;The child specification describes how the supervisor start, shutdown and restart child processes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;:id&lt;/code&gt; - a value used to identify the child specification internally by the supervisor; defaults to the given module. In case of conflicting &lt;code&gt;:id&lt;/code&gt;, the supervisor will refuse to initialize and require explicit IDs. This key is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;:start&lt;/code&gt; - a tuple with the module-function-args to be invoked to start the child process. This key is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;:restart&lt;/code&gt; - an atom that defines when a terminated child process should be restarted (see the “Restart values” section below). This key is optional and defaults to &lt;code&gt;:permanent&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;:shutdown&lt;/code&gt; - an atom that defines how a child process should be terminated (see the “Shutdown values” section below). This key is optional and defaults to 5000 if the type is &lt;code&gt;:worker&lt;/code&gt; or &lt;code&gt;:infinity&lt;/code&gt; if the type is &lt;code&gt;:supervisor&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;:type&lt;/code&gt; - if the child process is a &lt;code&gt;:worker&lt;/code&gt; or a &lt;code&gt;:supervisor&lt;/code&gt;. This key is optional and defaults to &lt;code&gt;:worker&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a sixth key, called &lt;code&gt;:modules&lt;/code&gt;, which is rarely changed and it is set automatically based on the value in &lt;code&gt;:start&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180525.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/elixir_app_sup</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/elixir_app_sup</guid>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>理解计算机系统(1)</title>
        <description>&lt;h2 id=&quot;编译四个阶段&quot;&gt;编译四个阶段&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;预处理阶段
&lt;code&gt;#include&lt;/code&gt;告诉预处理器将指定文件内容插入到本文件中&lt;/li&gt;
  &lt;li&gt;编译阶段
生成汇编文件&lt;/li&gt;
  &lt;li&gt;汇编阶段
汇编文件 =&amp;gt; 可重定位目标程序(.o)&lt;/li&gt;
  &lt;li&gt;链接阶段
.o =&amp;gt; 可执行文件&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;硬件组成&quot;&gt;硬件组成&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;总线
传送定长字节块 =&amp;gt; 字(word)&lt;/li&gt;
  &lt;li&gt;I/O设备&lt;/li&gt;
  &lt;li&gt;主存&lt;/li&gt;
  &lt;li&gt;CPU&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;操作系统&quot;&gt;操作系统&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;文件(字节序列)，是对I/O设备的抽象&lt;/li&gt;
  &lt;li&gt;虚拟内存是对主存和磁盘的抽象&lt;/li&gt;
  &lt;li&gt;进程是对CPU、主存和I/O设备的抽象&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180513.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/computer_systems</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/computer_systems</guid>
        
        
        <category>system</category>
        
      </item>
    
      <item>
        <title>coincoin源码之token</title>
        <description>&lt;h2 id=&quot;区块链是什么&quot;&gt;区块链是什么&lt;/h2&gt;

&lt;p&gt;区块链是一个提供了拜占庭容错、并保证了最终一致性的分布式数据库；从数据结构上看，它是基于时间序列的链式数据块结构；从节点拓扑上看，它所有的节点互为冗余备份；从操作上看，它提供了基于密码学的公私钥管理体系来管理账户。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;区块链是一个分布式网络；&lt;/li&gt;
  &lt;li&gt;区块链可以帮助多个节点达成共识去记录和 Token 相关的事情；&lt;/li&gt;
  &lt;li&gt;区块链可以帮助所有人无门槛地构建属于自己的小经济系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;区块链在技术上的-7-个特征&quot;&gt;区块链在技术上的 7 个特征&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;区块链的存储基于分布式数据库；&lt;/li&gt;
  &lt;li&gt;数据库是区块链的数据载体，区块链是交易的业务逻辑载体；&lt;/li&gt;
  &lt;li&gt;区块链按时间序列化区块数据，整个网络有一个最终确定状态；&lt;/li&gt;
  &lt;li&gt;区块链只对添加有效，对其他操作无效；&lt;/li&gt;
  &lt;li&gt;交易基于非对称加密的公私钥验证；&lt;/li&gt;
  &lt;li&gt;区块链网络要求拜占庭将军容错；&lt;/li&gt;
  &lt;li&gt;共识算法能够“解决”双花问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;coincoin之tokenblockchain-app&quot;&gt;coincoin之token，blockchain app&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/coincoin_token.jpg&quot; alt=&quot;token&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180510.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/blockchain_coincoin</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/blockchain_coincoin</guid>
        
        
        <category>elixir</category>
        
        <category>blockchain</category>
        
      </item>
    
      <item>
        <title>Elixir String Manipulation</title>
        <description>&lt;p&gt;To get the list of string that compose a longer string, use String.codepoints/1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;iex(1)&amp;gt; String.codepoints(&quot;你好a&quot;)
[&quot;你&quot;, &quot;好&quot;, &quot;a&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the list of codepoints that represent each letter in the string, use String.to_charlist/1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-elixir&quot;&gt;iex(2)&amp;gt; String.to_charlist(&quot;你好a&quot;)
[20320, 22909, 97]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180505.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/elixir_today_i_learned3</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/elixir_today_i_learned3</guid>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Elixir - with</title>
        <description>&lt;h2 id=&quot;macrowithargs&quot;&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#with/1&quot;&gt;macrowith(args)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to combine matching clauses.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iex&amp;gt; opts = %{width: 10, height: 15}
iex&amp;gt; with {:ok, width} &amp;lt;- Map.fetch(opts, :width),
...&amp;gt;      {:ok, height} &amp;lt;- Map.fetch(opts, :height),
...&amp;gt;      do: {:ok, width * height}
{:ok, 150}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all clauses match, the &lt;code&gt;do&lt;/code&gt; block is executed, returning its result. Otherwise the chain is aborted and the non-matched value is returned.&lt;/p&gt;

&lt;p&gt;Guards can be used in patterns as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iex&amp;gt; users = %{&quot;melany&quot; =&amp;gt; &quot;guest&quot;, &quot;bob&quot; =&amp;gt; :admin}
iex&amp;gt; with {:ok, role} when not is_binary(role) &amp;lt;- Map.fetch(users, &quot;bob&quot;),
...&amp;gt;      do: {:ok, to_string(role)}
{:ok, &quot;admin&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180504.jpg&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/elixir_today_i_learned2</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/elixir_today_i_learned2</guid>
        
        
        <category>elixir</category>
        
      </item>
    
      <item>
        <title>Flexible Box Layout</title>
        <description>&lt;h2 id=&quot;flex-layout-overview&quot;&gt;Flex Layout Overview&lt;/h2&gt;

&lt;p&gt;Flex layout is designed for laying out more complex applications and webpages.The contents of a flex container:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;can be laid out in any flow direction (leftwards, rightwards, downwards, or even upwards!)&lt;/li&gt;
  &lt;li&gt;can have their display order reversed or rearranged at the style layer (i.e., visual order can be independent of source and speech order)&lt;/li&gt;
  &lt;li&gt;can be laid out linearly along a single (main) axis or wrapped into multiple lines along a secondary (cross) axis&lt;/li&gt;
  &lt;li&gt;can “flex” their sizes to respond to the available space&lt;/li&gt;
  &lt;li&gt;can be aligned with respect to their container or each other on the secondary (cross)&lt;/li&gt;
  &lt;li&gt;can be dynamically collapsed or uncollapsed along the main axis while preserving the container’s cross size&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开始使用flexlayout&quot;&gt;开始使用FlexLayout&lt;/h2&gt;

&lt;p&gt;在父元素中显式的设置&lt;code&gt;display:flex&lt;/code&gt;或者&lt;code&gt;display:inline-flex&lt;/code&gt;就会自动变成Flex容器，而其子元素就变成了Flex项目。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Flex容器（&lt;code&gt;Flex Container&lt;/code&gt;）：父元素显式设置了&lt;code&gt;display:flex&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Flex项目（&lt;code&gt;Flex Items&lt;/code&gt;）：Flex容器内的子元素&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flex容器属性&quot;&gt;Flex容器属性&lt;/h2&gt;

&lt;h3 id=&quot;flex-direction&quot;&gt;flex-direction&lt;/h3&gt;
&lt;p&gt;flex-direction属性控制Flex项目沿着主轴（&lt;code&gt;Main Axis&lt;/code&gt;）的排列方向。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* ul 是一个flex容器 */
ul {
    flex-direction: row || column || row-reverse || column-reverse;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单点来说，就是&lt;code&gt;flex-direction&lt;/code&gt;属性让你决定Flex项目如何排列。它可以是行（水平）、列（垂直）或者行和列的反向。
从技术上讲，水平和垂直在Flex世界中不是什么方向（概念）。它们常常被称为主轴（&lt;code&gt;Main-Axis&lt;/code&gt;）和侧轴（&lt;code&gt;Cross-Axis&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/understanding-flexbox-11.jpg&quot; alt=&quot;flex-direction&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;flex-wrap&quot;&gt;flex-wrap&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul { flex-wrap: wrap || nowrap || wrap-reverse; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;flex-flow&quot;&gt;flex-flow&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;flex-flow&lt;/code&gt;是&lt;code&gt;flex-direction&lt;/code&gt;和&lt;code&gt;flex-wrap&lt;/code&gt;两个属性的速记属性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul { flex-flow: row wrap; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;justify-content&quot;&gt;justify-content&lt;/h3&gt;
&lt;p&gt;决定Flex项在&lt;code&gt;Main-Axis&lt;/code&gt;上的排列方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul { justify-content: flex-start || flex-end || center || space-between || space-around }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;默认&lt;code&gt;flex-start&lt;/code&gt;让所有Flex项目靠Main-Axis开始边缘（左对齐）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;让所有Flex项目靠Main-Axis结束边缘（右对齐）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;center&lt;/code&gt;让所有Flex项目排在Main-Axis中间（居中对齐）&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;space-between&lt;/code&gt;让除了第一个和最一个Flex项目的两者间间距相同（两端对齐）
&lt;img src=&quot;https://xiaobin0860.github.io/imgs/understanding-flexbox-24.jpeg&quot; alt=&quot;flex-direction&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;space-around&lt;/code&gt;让每个Flex项目具有相同的空间
&lt;img src=&quot;https://xiaobin0860.github.io/imgs/understanding-flexbox-26.jpeg&quot; alt=&quot;flex-direction&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;align-items&quot;&gt;align-items&lt;/h3&gt;
&lt;p&gt;决定Flex项在&lt;code&gt;Cross-Axis&lt;/code&gt;上的排列方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul { align-items: flex-start || flex-end || center || stretch || baseline }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;默认&lt;code&gt;stretch&lt;/code&gt;让所有的Flex项目高度和Flex容器高度一样&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;flex-start&lt;/code&gt;让所有Flex项目靠Cross-Axis开始边缘（顶部对齐）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;flex-end&lt;/code&gt;让所有Flex项目靠Cross-Axis结束边缘（底部对齐）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;center&lt;/code&gt;让Flex项目在Cross-Axis中间（居中对齐）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;baseline&lt;/code&gt;让所有Flex项目在Cross-Axis上沿着他们自己的基线对齐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;align-content&quot;&gt;align-content&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;align-content&lt;/code&gt;属性用于多行的Flex容器。它也是用来控制Flex项目在Flex容器里的排列方式，排列效果和&lt;code&gt;align-items&lt;/code&gt;值一样，但没有baseline属性值。&lt;/p&gt;

&lt;h2 id=&quot;flex项目属性&quot;&gt;Flex项目属性&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;order || flex-grow || flex-shrink || flex-basis
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;order&quot;&gt;order&lt;/h3&gt;
&lt;p&gt;允许Flex项目在一个Flex容器中重新排序。&lt;code&gt;order&lt;/code&gt;属性的默认值是0。它可以接受一个正值，也可以接受一个负值。Flex项目会根据&lt;code&gt;order&lt;/code&gt;值重新排序。从底到高。&lt;/p&gt;

&lt;h3 id=&quot;flex-grow-和-flex-shrink&quot;&gt;flex-grow 和 flex-shrink&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt;和&lt;code&gt;flex-shrink&lt;/code&gt;属性控制Flex项目在容器有多余的空间如何放大（扩展），在没有额外空间又如何缩小。
他们可能接受0或者大于0的任何正数。
默认情况下，&lt;code&gt;flex-grow&lt;/code&gt;属性值设置为0。表示Flex项目不会增长，填充Flex容器可用空间。
&lt;code&gt;flex-shrink&lt;/code&gt;的值是1，也就是说空间缩小Flex项目也会缩小，以适应新的空间。&lt;/p&gt;

&lt;h3 id=&quot;flex-basis&quot;&gt;flex-basis&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;flex-basis&lt;/code&gt;属性可以指定Flex项目的初始大小。也就是&lt;code&gt;flex-grow&lt;/code&gt;和&lt;code&gt;flex-shrink&lt;/code&gt;属性调整它的大小以适应Flex容器之前。
默认的值是&lt;code&gt;auto&lt;/code&gt;。&lt;code&gt;flex-basis&lt;/code&gt;可以取任何用于&lt;code&gt;width&lt;/code&gt;属性的任何值。比如 &lt;code&gt;% || em || rem || px&lt;/code&gt;等。&lt;/p&gt;

&lt;h3 id=&quot;flex速记&quot;&gt;flex速记&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;flex&lt;/code&gt;是&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;和&lt;code&gt;flex-basis&lt;/code&gt;三个属性的速记（简写）&lt;/p&gt;

&lt;h3 id=&quot;align-self&quot;&gt;align-self&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;auto || flex-start || flex-end || center || baseline || stretch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;与Flex容器的&lt;code&gt;align-items&lt;/code&gt;属性类似，只不过只改变本Flex项目沿着侧轴的位置。&lt;/p&gt;

&lt;h2 id=&quot;绝对和相对flex项目&quot;&gt;绝对和相对Flex项目&lt;/h2&gt;
&lt;p&gt;绝对Flex项目的宽度只基于 flex 属性，而相对Flex项目的宽度基于内容大小。
当Flex项目因为被设置为&lt;code&gt;flex-basis: auto&lt;/code&gt;，而导致宽度被自动计算时，是基于Flex项目内包含的内容的大小而计算。
Flex项目的初始宽度是零&lt;code&gt;flex-basis: 0&lt;/code&gt;，并且它们会伸展以适应可用空间。当有两到多个Flex项目的&lt;code&gt;flex-basis&lt;/code&gt;取值为0时，它们会基于&lt;code&gt;flex-grow&lt;/code&gt;值共享可用空间。&lt;/p&gt;

&lt;h2 id=&quot;auto-margin对齐&quot;&gt;Auto-margin对齐&lt;/h2&gt;
&lt;p&gt;当心Flex项目上的&lt;code&gt;margin: auto&lt;/code&gt;对齐。值为&lt;code&gt;auto&lt;/code&gt;的方向（左、右或者二者都是）会占据所有剩余空间。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://xiaobin0860.github.io/imgs/20180503.png&quot; alt=&quot;大宝&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
        <link>https://xiaobin0860.github.io/ife_flex</link>
        <guid isPermaLink="true">https://xiaobin0860.github.io/ife_flex</guid>
        
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>ife</category>
        
      </item>
    
  </channel>
</rss>
