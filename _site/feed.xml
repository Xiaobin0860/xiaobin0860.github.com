<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>乌托邦</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Apr 2018 16:39:19 +0800</pubDate>
    <lastBuildDate>Fri, 27 Apr 2018 16:39:19 +0800</lastBuildDate>
    <generator>Jekyll v3.8.0</generator>
    
      <item>
        <title>ife day4: 背景边框列表链接</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;background&lt;/li&gt;
  &lt;li&gt;background-color&lt;/li&gt;
  &lt;li&gt;background-image&lt;/li&gt;
  &lt;li&gt;background-repeat&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;background-position&lt;/p&gt;

    &lt;p&gt;body {
      font-family: sans-serif;
      background-color: #F0F8FF;
      border: 40px solid black;
      border-image-source: url(https://mdn.mozillademos.org/files/13060/border-image.png);
      border-image-slice: 40;
      border-image-repeat: round;
  }&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;边框&quot;&gt;边框&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;border&lt;/li&gt;
  &lt;li&gt;border-color&lt;/li&gt;
  &lt;li&gt;border-style&lt;/li&gt;
  &lt;li&gt;border-width&lt;/li&gt;
  &lt;li&gt;border-radius&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;列表&quot;&gt;列表&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;list-style&lt;/li&gt;
  &lt;li&gt;list-style-type&lt;/li&gt;
  &lt;li&gt;list-style-image&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;链接&quot;&gt;链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;a:link&lt;/li&gt;
  &lt;li&gt;a:visited&lt;/li&gt;
  &lt;li&gt;a:hover&lt;/li&gt;
  &lt;li&gt;a:active&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 00:00:00 +0800</pubDate>
        <link>/ife_day4</link>
        <guid isPermaLink="true">/ife_day4</guid>
        
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>ife</category>
        
      </item>
    
      <item>
        <title>ife day3: CSS基础</title>
        <description>&lt;h2 id=&quot;css规则&quot;&gt;CSS规则&lt;/h2&gt;

&lt;p&gt;由两部分组成： 选择器及一条或多条声明。
&lt;img src=&quot;/imgs/ct_css_selector.gif&quot; alt=&quot;CSS语法&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;选择器&quot;&gt;选择器&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;元素/类型选择器&lt;/p&gt;

    &lt;p&gt;p {}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类选择器&lt;/p&gt;

    &lt;p&gt;class=”first done”
  .first {}
  .done {}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;id选择器&lt;/p&gt;

    &lt;p&gt;id=”rude” id唯一
  #rude {}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通用选择器&lt;/p&gt;

    &lt;p&gt;* {}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属性选择器&lt;/p&gt;

    &lt;p&gt;[attr] {} 有attr的元素
  [attr=val] {} attr值为val的元素
  [attr~=val] {} attr值包含val&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;伪类&lt;/p&gt;

    &lt;p&gt;:active, :focus, :hover, …
  a:visited {}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;组合器&lt;/p&gt;

    &lt;p&gt;A,B {} 或
  A B {} B是A的后代结点&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用属性&quot;&gt;常用属性&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;color&lt;/li&gt;
  &lt;li&gt;font-family&lt;/li&gt;
  &lt;li&gt;font-style&lt;/li&gt;
  &lt;li&gt;font-weight&lt;/li&gt;
  &lt;li&gt;font-size&lt;/li&gt;
  &lt;li&gt;text-align&lt;/li&gt;
  &lt;li&gt;text-shadow&lt;/li&gt;
  &lt;li&gt;line-height&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 27 Apr 2018 00:00:00 +0800</pubDate>
        <link>/ife_day3</link>
        <guid isPermaLink="true">/ife_day3</guid>
        
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>ife</category>
        
      </item>
    
      <item>
        <title>ife day2: HTML基本标签</title>
        <description>&lt;p&gt;1、HTML是什么，HTML5是什么&lt;/p&gt;

&lt;p&gt;答：HTML 指的是超文本标记语言 (Hyper Text Markup Language)。
HTML5是最新的HTML标准，拥有更丰富的语义、图形以及多媒体元素等内容。&lt;/p&gt;

&lt;p&gt;2、HTML元素标签、属性都是什么概念？&lt;/p&gt;

&lt;p&gt;答：HTML不是编程语言，是标记语言，所以要使用标记标签来描述网页。
属性是用来提供HTML标签更多的信息。&lt;/p&gt;

&lt;p&gt;3、文档类型是什么概念，起什么作用？&lt;/p&gt;

&lt;p&gt;答：在互联网上有许多不同的文档，只有了解文档的类型，浏览器才能正确的显示文档。提前声明文档类型可以帮助浏览器正确的显示网页。&lt;/p&gt;

&lt;p&gt;4、meta标签都用来做什么的？&lt;/p&gt;

&lt;p&gt;答：通常所说的META标签，是在HTML网页源代码中一个重要的html标签。META标签用来描述一个HTML网页文档的属性，例如作者、日期和时间、网页描述、关键词、页面刷新等。&lt;/p&gt;

&lt;p&gt;5、Web语义化是什么，是为了解决什么问题&lt;/p&gt;

&lt;p&gt;答：HTML的每个标签都有其特定含义(语义),Web语义化是指使用语义恰当的标签,使页面有良好的结构,页面元素有含义,能够让人和搜索引擎都容易理解。&lt;/p&gt;

&lt;p&gt;6、链接是什么概念，对应什么标签？&lt;/p&gt;

&lt;p&gt;答：HTML &amp;lt;\a&amp;gt; 元素 (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。&lt;/p&gt;

&lt;p&gt;7、常用标签都有哪些，都适合用在什么场景&lt;/p&gt;

&lt;p&gt;答：
body:在网页上要展示出来的页面内容一定要放在body标签中
p:如果想在网页上显示文章，这时就需要p标签了，把文章的段落放到p标签中。标签的默认样式，段前段后都会有空白，如果不喜欢这个空白，可以用css样式来删除或改变它。
span:标签是没有语义的，它的作用就是为了设置单独的样式用的。
br:在需要加回车换行的地方加入br，br标签作用相当于word文档中的回车。在 html 代码中输入回车、空格都是没有作用的。在html文本中想输入回车换行，就必须输入br。没有HTML内容的标签就是空标签，空标签只需要写一个开始标签，这样的标签有br、hr和img。
div:在网页制作过程过中，可以把一些独立的逻辑部分划分出来，放在一个div标签中，这个div标签的作用就相当于一个容器。什么是逻辑部分？它是页面上相互关联的一组元素。如网页中的独立的栏目版块，就是一个典型的逻辑部分。用id属性来为div提供唯一的名称，必须唯一。
img:插入图片,img src=”图片地址” alt=”下载失败时的替换文本” title = “提示文本” src：标识图像的位置；alt：指定图像的描述性文本，当图像不可见时（下载不成功时），可看到该属性指定的文本；title：提供在图像可见时对图像的描述(鼠标滑过图片时显示的文本)；图像可以是GIF，PNG，JPEG格式的图像文件。&lt;/p&gt;

&lt;p&gt;8、表单标签都有哪些，对应着什么功能，都有哪些属性&lt;/p&gt;

&lt;p&gt;答：
form:可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据。form method=”传送方式” action=”服务器文件” . form标签是成对出现的，以form开始，以/form结束。action ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)。method ： 数据传送的方式（get/post）。所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在标签之间
input:当用户要在表单中键入字母、数字等内容时，就会用到文本输入框。文本框也可以转化为密码输入框。input type=”text/password” name=”名称” value=”文本” / 当type=”text”时，输入框为文本输入框;当type=”password”时, 输入框为密码输入框。name：为文本框命名，以备后台程序ASP 、PHP使用。value：为文本输入框设置默认值。(一般起到提示作用)
textarea:当用户需要在表单中输入大段文字时，需要用到文本输入域。textarea rows=”行数” cols=”列数” 文本 /textarea rows ：多行输入域的行数。cols ：多行输入域的列数。在textarea /textarea 标签之间可以输入默认值。
radio/checkbox:使用单选框、复选框，让用户选择,input type=”radio/checkbox” value=”值” name=”名称” checked=”checked”/&amp;gt; 当 type=”radio” 时，控件为单选框,当 type=”checkbox” 时，控件为复选框,value：提交数据到服务器的值（后台程序PHP使用）,name：为控件命名，以备后台程序 ASP、PHP 使用,checked：当设置 checked=”checked” 时，该选项被默认选中,同一组的单选按钮，name 取值一定要一致，这样同一组的单选按钮才可以起到单选的作用。
submit:使用提交按钮，提交数据,input type=”submit” value=”提交”&amp;gt; type：只有当type值设置为submit时，按钮才有提交作用,value：按钮上显示的文字&lt;/p&gt;

&lt;p&gt;9、ol, ul, li, dl, dd, dt等这些标签都适合用在什么地方，举个例子&lt;/p&gt;

&lt;p&gt;答：ol、ul、li适用无描述的列表。例如：新闻展示页面，一共N条新闻，点进去可浏览详情。
dl、dd、dt适用有描述的列表 例如：简历页面，介绍自己的信息、年龄、住址等。&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 +0800</pubDate>
        <link>/ife_day2</link>
        <guid isPermaLink="true">/ife_day2</guid>
        
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>ife</category>
        
      </item>
    
      <item>
        <title>ife day1: Why?</title>
        <description>&lt;h2 id=&quot;我为什么学习前端&quot;&gt;我为什么学习前端&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;更容易、更快速地实现自己的想法&lt;/li&gt;
  &lt;li&gt;跨平台&lt;/li&gt;
  &lt;li&gt;随着设备硬件、网络速度提升，Web一统江湖也不是不可能。起码会有很大发展空间&lt;/li&gt;
  &lt;li&gt;补齐短板&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 +0800</pubDate>
        <link>/ife_day1</link>
        <guid isPermaLink="true">/ife_day1</guid>
        
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>ife</category>
        
      </item>
    
      <item>
        <title>hook程序崩溃</title>
        <description>&lt;p&gt;##参数类型错误导致hook程序崩溃&lt;/p&gt;

&lt;p&gt;不要完全信任class-dump，class-dump出来的参数类型可能是错误的。&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0800</pubDate>
        <link>/ios-reverse</link>
        <guid isPermaLink="true">/ios-reverse</guid>
        
        
        <category>ios</category>
        
        <category>reverse</category>
        
      </item>
    
      <item>
        <title>分析block函数签名</title>
        <description>&lt;p&gt;##block结构&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/Block-ABI-Apple.html&quot;&gt;Block&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Block_literal_1 {
    void *isa; // initialized to &amp;amp;_NSConcreteStackBlock or &amp;amp;_NSConcreteGlobalBlock
    int flags;
    int reserved;
    void (*invoke)(void *, ...);
    struct Block_descriptor_1 {
    unsigned long int reserved;         // NULL
        unsigned long int size;         // sizeof(struct Block_literal_1)
        // optional helper functions
        void (*copy_helper)(void *dst, void *src);     // IFF (1&amp;lt;&amp;lt;25)
        void (*dispose_helper)(void *src);             // IFF (1&amp;lt;&amp;lt;25)
        // required ABI.2010.3.16
        const char *signature;                         // IFF (1&amp;lt;&amp;lt;30)
    } *descriptor;
    // imported variables
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##函数签名&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html&quot;&gt;Type Encodings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[NSMethodSignature signatureWithObjCTypes:&quot;v32@?0@&quot;NSString&quot;4@&quot;NSURLResponse&quot;8@&quot;NSData&quot;12@&quot;NSError&quot;16@&quot;NSError&quot;20i24i28&quot;]&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0800</pubDate>
        <link>/ios-block-reverse</link>
        <guid isPermaLink="true">/ios-block-reverse</guid>
        
        
        <category>ios</category>
        
        <category>reverse</category>
        
      </item>
    
      <item>
        <title>Elixir(1)</title>
        <description>&lt;p&gt;##Interactive mode&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;iex&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex&amp;gt; 40+2
42
iex&amp;gt; &quot;hello&quot; &amp;lt;&amp;gt; &quot; world&quot;
&quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Running scripts&lt;/p&gt;

&lt;p&gt;demo.exs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IO.puts &quot;Hello world from Elixir.&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;run with &lt;code&gt;elixir&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ elixir demo.exs
Hello world from Elixir.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Basic types&lt;/p&gt;

&lt;p&gt;Elixir basic types: integers,floats,booleans,strings,list,atoms,tuples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex&amp;gt; is_atom(false)
true
iex&amp;gt; true == :true
true
iex&amp;gt; is_binary(&quot;hello&quot;)
true
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate>
        <link>/Elixir</link>
        <guid isPermaLink="true">/Elixir</guid>
        
        
        <category>elixir</category>
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(6)</title>
        <description>&lt;p&gt;##Concurrency&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;start new process, &lt;code&gt;spawn/1&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;G = fun(X) -&amp;gt; timer:sleep(X), io:format(“~p~n”, [X]) end.
 [spawn(fun(X) -&amp;gt; G(X) end) || X &amp;lt;= list:seq(1,10)].&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;send message&lt;/p&gt;

    &lt;p&gt;self() ! self() ! double&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;receive message&lt;/p&gt;

    &lt;p&gt;receive
     Pattern1 when Guard1 -&amp;gt; Expr1;
     Partern2 when Guard2 -&amp;gt; Expr2;
     _ -&amp;gt; Expr3
 end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(5)</title>
        <description>&lt;h2 id=&quot;recursion&quot;&gt;Recursion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fac&lt;/p&gt;

    &lt;p&gt;fac(0) -&amp;gt; 1;
  fac(N) when N &amp;gt; 0 -&amp;gt; N*fac(N-1).&lt;/p&gt;

    &lt;p&gt;tail_fac(N) -&amp;gt; tail_fac(N, 1).
  tail_fac(0, Fac) -&amp;gt; Fac;
  tail_fac(N, Fac) when N&amp;gt;0 -&amp;gt; tail_fac(N-1, N*Fac).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Len
  len([]) -&amp;gt; 0;
  len([_|T]) -&amp;gt; 1 + len(T).&lt;/p&gt;

    &lt;p&gt;tail_len(L) -&amp;gt; tail_len(L,0).
  tail_len([], Acc) -&amp;gt; Acc;
  tail_len([_|T], Acc) -&amp;gt; tail_len(T,Acc+1).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;higher-order-functions&quot;&gt;Higher Order Functions&lt;/h2&gt;

&lt;p&gt;pass functions from outside a module&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun Module:Function/Arity

map(_, []) -&amp;gt; [];
map(F, [H|T]) -&amp;gt; [F(H)|map(F,T)].
incr(X) -&amp;gt; X + 1.
decr(X) -&amp;gt; X - 1.

1&amp;gt; c(hhfuns).
{ok, hhfuns}
2&amp;gt; L = [1,2,3,4,5].
[1,2,3,4,5]
3&amp;gt; hhfuns:increment(L).
[2,3,4,5,6]
4&amp;gt; hhfuns:decrement(L).
[0,1,2,3,4]
5&amp;gt; hhfuns:map(fun hhfuns:incr/1, L).
[2,3,4,5,6]
6&amp;gt; hhfuns:map(fun hhfuns:decr/1, L).
[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 22 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(4)</title>
        <description>&lt;h2 id=&quot;bit-syntax&quot;&gt;Bit Syntax!&lt;/h2&gt;

&lt;p&gt;Bit syntax encloses binary data between « and »,
splits it in readable segments, and each segment is separated by a comma.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1&amp;gt; Color = 16#F09A29.
15768105
2&amp;gt; Pixel = &amp;lt;&amp;lt;Color:24&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;240,154,41&amp;gt;&amp;gt;
3&amp;gt; Pixels = &amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;
4&amp;gt; &amp;lt;&amp;lt;Pix1,Pix2,Pix3,Pix4&amp;gt;&amp;gt; = Pixels.
** exception error: no match of right hand side value 
5&amp;gt; &amp;lt;&amp;lt;Pix1:24, Pix2:24, Pix3:24, Pix4:24&amp;gt;&amp;gt; = Pixels.
&amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;
6&amp;gt; &amp;lt;&amp;lt;R:8, G:8, B:8&amp;gt;&amp;gt; = &amp;lt;&amp;lt;Pix1:24&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;213,45,132&amp;gt;&amp;gt;
7&amp;gt; R.
213
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What are modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modules are a bunch of functions regrouped in a single file,
under a single name. Additionally, all functions in Erlang must be defined in modules.
Function defined in a module needs to be called with the form &lt;code&gt;Module:Function(Arguments).&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Module Declaration&lt;/p&gt;

    &lt;p&gt;-module(Name).
  -export([Function1/Arity, Function2/Arity, …, FunctionN/Arity]).
  -Name(Attribute).   #-compile([debug_info, export_all]).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiling the code&lt;/p&gt;

    &lt;p&gt;$ erlc flags file.erl&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syntax-in-functions&quot;&gt;Syntax in functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pattern Matching&lt;/p&gt;

    &lt;p&gt;greet(male, Name) -&amp;gt;
  io:format(“Hello, Mr. ~s!”, [Name]);
  greet(female, Name) -&amp;gt;
  io:format(“Hello, Mrs. ~s!”, [Name]);
  greet(_, Name) -&amp;gt;
  io:format(“Hello, ~s!”, [Name]).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Guards&lt;/p&gt;

    &lt;p&gt;right_age(X) when X &amp;gt;= 16, X =&amp;lt; 104 -&amp;gt;
  true;
  right_age(_) -&amp;gt;
  false.&lt;/p&gt;

    &lt;p&gt;is_atom/1           is_binary/1 
  is_bitstring/1      is_boolean/1        is_builtin/3 
  is_float/1          is_function/1       is_function/2 
  is_integer/1        is_list/1           is_number/1 
  is_pid/1            is_port/1           is_record/2 
  is_record/3         is_reference/1      is_tuple/1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If&lt;/p&gt;

    &lt;p&gt;%% note, this one would be better as a pattern match in function heads!
  %% I’m doing it this way for the sake of the example.
  help_me(Animal) -&amp;gt;
      Talk = if Animal == cat  -&amp;gt; “meow”;
          Animal == beef -&amp;gt; “mooo”;
          Animal == dog  -&amp;gt; “bark”;
          Animal == tree -&amp;gt; “bark”;
          true -&amp;gt; “fgdadfgna”
      end,
      {Animal, “says “ ++ Talk ++ “!”}.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Case&lt;/p&gt;

    &lt;p&gt;beach(Temperature) -&amp;gt;
      case Temperature of
          {celsius, N} when N &amp;gt;= 20, N =&amp;lt; 45 -&amp;gt;
              ‘favorable’;
          {kelvin, N} when N &amp;gt;= 293, N =&amp;lt; 318 -&amp;gt;
              ‘scientifically favorable’;
          {fahrenheit, N} when N &amp;gt;= 68, N =&amp;lt; 113 -&amp;gt;
              ‘favorable in the US’;
          _ -&amp;gt;
              ‘avoid beach’
      end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
  </channel>
</rss>
