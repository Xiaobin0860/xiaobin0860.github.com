<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>乌托邦</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Jan 2017 02:11:26 +0800</pubDate>
    <lastBuildDate>Sun, 15 Jan 2017 02:11:26 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>hook程序崩溃</title>
        <description>&lt;h2 id=&quot;hook&quot;&gt;参数类型错误导致hook程序崩溃&lt;/h2&gt;

&lt;p&gt;不要完全信任class-dump，class-dump出来的参数类型可能是错误的。&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0800</pubDate>
        <link>/ios-reverse</link>
        <guid isPermaLink="true">/ios-reverse</guid>
        
        
        <category>ios</category>
        
        <category>reverse</category>
        
      </item>
    
      <item>
        <title>分析block函数签名</title>
        <description>&lt;h2 id=&quot;block&quot;&gt;block结构&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://clang.llvm.org/docs/Block-ABI-Apple.html&quot;&gt;Block&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Block_literal_1 {
    void *isa; // initialized to &amp;amp;_NSConcreteStackBlock or &amp;amp;_NSConcreteGlobalBlock
    int flags;
    int reserved;
    void (*invoke)(void *, ...);
    struct Block_descriptor_1 {
    unsigned long int reserved;         // NULL
        unsigned long int size;         // sizeof(struct Block_literal_1)
        // optional helper functions
        void (*copy_helper)(void *dst, void *src);     // IFF (1&amp;lt;&amp;lt;25)
        void (*dispose_helper)(void *src);             // IFF (1&amp;lt;&amp;lt;25)
        // required ABI.2010.3.16
        const char *signature;                         // IFF (1&amp;lt;&amp;lt;30)
    } *descriptor;
    // imported variables
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;函数签名&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html&quot;&gt;Type Encodings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[NSMethodSignature signatureWithObjCTypes:&quot;v32@?0@&quot;NSString&quot;4@&quot;NSURLResponse&quot;8@&quot;NSData&quot;12@&quot;NSError&quot;16@&quot;NSError&quot;20i24i28&quot;]&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 00:00:00 +0800</pubDate>
        <link>/ios-block-reverse</link>
        <guid isPermaLink="true">/ios-block-reverse</guid>
        
        
        <category>ios</category>
        
        <category>reverse</category>
        
      </item>
    
      <item>
        <title>Elixir(1)</title>
        <description>&lt;h2 id=&quot;interactive-mode&quot;&gt;Interactive mode&lt;/h2&gt;

&lt;p&gt;Open up &lt;code&gt;iex&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex&amp;gt; 40+2
42
iex&amp;gt; &quot;hello&quot; &amp;lt;&amp;gt; &quot; world&quot;
&quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;running-scripts&quot;&gt;Running scripts&lt;/h2&gt;

&lt;p&gt;demo.exs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IO.puts &quot;Hello world from Elixir.&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;run with &lt;code&gt;elixir&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ elixir demo.exs
Hello world from Elixir.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;basic-types&quot;&gt;Basic types&lt;/h2&gt;

&lt;p&gt;Elixir basic types: integers,floats,booleans,strings,list,atoms,tuples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex&amp;gt; is_atom(false)
true
iex&amp;gt; true == :true
true
iex&amp;gt; is_binary(&quot;hello&quot;)
true
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate>
        <link>/Elixir</link>
        <guid isPermaLink="true">/Elixir</guid>
        
        
        <category>elixir</category>
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(6)</title>
        <description>&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;start new process, &lt;code&gt;spawn/1&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;G = fun(X) -&amp;gt; timer:sleep(X), io:format(“~p~n”, [X]) end.
 [spawn(fun(X) -&amp;gt; G(X) end) || X &amp;lt;= list:seq(1,10)].&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;send message&lt;/p&gt;

    &lt;p&gt;self() ! self() ! double&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;receive message&lt;/p&gt;

    &lt;p&gt;receive
     Pattern1 when Guard1 -&amp;gt; Expr1;
     Partern2 when Guard2 -&amp;gt; Expr2;
     _ -&amp;gt; Expr3
 end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(5)</title>
        <description>&lt;h2 id=&quot;recursion&quot;&gt;Recursion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Fac&lt;/p&gt;

    &lt;p&gt;fac(0) -&amp;gt; 1;
  fac(N) when N &amp;gt; 0 -&amp;gt; N*fac(N-1).&lt;/p&gt;

    &lt;p&gt;tail_fac(N) -&amp;gt; tail_fac(N, 1).
  tail_fac(0, Fac) -&amp;gt; Fac;
  tail_fac(N, Fac) when N&amp;gt;0 -&amp;gt; tail_fac(N-1, N*Fac).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Len
  len([]) -&amp;gt; 0;
  len([_|T]) -&amp;gt; 1 + len(T).&lt;/p&gt;

    &lt;p&gt;tail_len(L) -&amp;gt; tail_len(L,0).
  tail_len([], Acc) -&amp;gt; Acc;
  tail_len([_|T], Acc) -&amp;gt; tail_len(T,Acc+1).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;higher-order-functions&quot;&gt;Higher Order Functions&lt;/h2&gt;

&lt;p&gt;pass functions from outside a module&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun Module:Function/Arity

map(_, []) -&amp;gt; [];
map(F, [H|T]) -&amp;gt; [F(H)|map(F,T)].
incr(X) -&amp;gt; X + 1.
decr(X) -&amp;gt; X - 1.

1&amp;gt; c(hhfuns).
{ok, hhfuns}
2&amp;gt; L = [1,2,3,4,5].
[1,2,3,4,5]
3&amp;gt; hhfuns:increment(L).
[2,3,4,5,6]
4&amp;gt; hhfuns:decrement(L).
[0,1,2,3,4]
5&amp;gt; hhfuns:map(fun hhfuns:incr/1, L).
[2,3,4,5,6]
6&amp;gt; hhfuns:map(fun hhfuns:decr/1, L).
[0,1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 22 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(4)</title>
        <description>&lt;h2 id=&quot;bit-syntax&quot;&gt;Bit Syntax!&lt;/h2&gt;

&lt;p&gt;Bit syntax encloses binary data between « and »,
splits it in readable segments, and each segment is separated by a comma.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1&amp;gt; Color = 16#F09A29.
15768105
2&amp;gt; Pixel = &amp;lt;&amp;lt;Color:24&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;240,154,41&amp;gt;&amp;gt;
3&amp;gt; Pixels = &amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;
4&amp;gt; &amp;lt;&amp;lt;Pix1,Pix2,Pix3,Pix4&amp;gt;&amp;gt; = Pixels.
** exception error: no match of right hand side value 
5&amp;gt; &amp;lt;&amp;lt;Pix1:24, Pix2:24, Pix3:24, Pix4:24&amp;gt;&amp;gt; = Pixels.
&amp;lt;&amp;lt;213,45,132,64,76,32,76,0,0,234,32,15&amp;gt;&amp;gt;
6&amp;gt; &amp;lt;&amp;lt;R:8, G:8, B:8&amp;gt;&amp;gt; = &amp;lt;&amp;lt;Pix1:24&amp;gt;&amp;gt;.
&amp;lt;&amp;lt;213,45,132&amp;gt;&amp;gt;
7&amp;gt; R.
213
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What are modules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modules are a bunch of functions regrouped in a single file,
under a single name. Additionally, all functions in Erlang must be defined in modules.
Function defined in a module needs to be called with the form &lt;code&gt;Module:Function(Arguments).&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Module Declaration&lt;/p&gt;

    &lt;p&gt;-module(Name).
  -export([Function1/Arity, Function2/Arity, …, FunctionN/Arity]).
  -Name(Attribute).   #-compile([debug_info, export_all]).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiling the code&lt;/p&gt;

    &lt;p&gt;$ erlc flags file.erl&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syntax-in-functions&quot;&gt;Syntax in functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pattern Matching&lt;/p&gt;

    &lt;p&gt;greet(male, Name) -&amp;gt;
  io:format(“Hello, Mr. ~s!”, [Name]);
  greet(female, Name) -&amp;gt;
  io:format(“Hello, Mrs. ~s!”, [Name]);
  greet(_, Name) -&amp;gt;
  io:format(“Hello, ~s!”, [Name]).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Guards&lt;/p&gt;

    &lt;p&gt;right_age(X) when X &amp;gt;= 16, X =&amp;lt; 104 -&amp;gt;
  true;
  right_age(_) -&amp;gt;
  false.&lt;/p&gt;

    &lt;p&gt;is_atom/1           is_binary/1 
  is_bitstring/1      is_boolean/1        is_builtin/3 
  is_float/1          is_function/1       is_function/2 
  is_integer/1        is_list/1           is_number/1 
  is_pid/1            is_port/1           is_record/2 
  is_record/3         is_reference/1      is_tuple/1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If&lt;/p&gt;

    &lt;p&gt;%% note, this one would be better as a pattern match in function heads!
  %% I’m doing it this way for the sake of the example.
  help_me(Animal) -&amp;gt;
      Talk = if Animal == cat  -&amp;gt; “meow”;
          Animal == beef -&amp;gt; “mooo”;
          Animal == dog  -&amp;gt; “bark”;
          Animal == tree -&amp;gt; “bark”;
          true -&amp;gt; “fgdadfgna”
      end,
      {Animal, “says “ ++ Talk ++ “!”}.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Case&lt;/p&gt;

    &lt;p&gt;beach(Temperature) -&amp;gt;
      case Temperature of
          {celsius, N} when N &amp;gt;= 20, N =&amp;lt; 45 -&amp;gt;
              ‘favorable’;
          {kelvin, N} when N &amp;gt;= 293, N =&amp;lt; 318 -&amp;gt;
              ‘scientifically favorable’;
          {fahrenheit, N} when N &amp;gt;= 68, N =&amp;lt; 113 -&amp;gt;
              ‘favorable in the US’;
          _ -&amp;gt;
              ‘avoid beach’
      end.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(3)</title>
        <description>&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;Lists can contain anything! &lt;code&gt;[Element1, Element2, ..., ElementN]&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1&amp;gt; [1, 2, 3, {numbers,[4,5,6]}, 5.34, atom].
[1,2,3,{numbers,[4,5,6]},5.34,atom]

2&amp;gt; [97, 98, 99].
&quot;abc&quot;

[New] ++ [OldList]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BIFS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hd([1,2,3,4]).
tl([1,2,3,4]).
length(List).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pattern matching:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Head|Tail].
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Tue, 16 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>Learn You Some Erlang(2)</title>
        <description>&lt;p&gt;不用找(1)了，记本上了^_^&lt;/p&gt;

&lt;h2 id=&quot;tuples&quot;&gt;Tuples&lt;/h2&gt;

&lt;p&gt;A tuple is a way to organize data. It’s a way to group togeter many terms 
when you known how many there are.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{Element1, Element2, ..., ElementN}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常使用&lt;code&gt;tagged tuple&lt;/code&gt;, 例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Temperature = {celsius, 23.213}.
Point = {point, {1, 2}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{celsius, T} = Temperature.
{point, {X, _}} = Point.
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 15 Feb 2016 00:00:00 +0800</pubDate>
        <link>/LYSE</link>
        <guid isPermaLink="true">/LYSE</guid>
        
        
        <category>erlang</category>
        
      </item>
    
      <item>
        <title>chicagoboss return json</title>
        <description>&lt;p&gt;return &lt;code&gt;{json, Data::proplist()}&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-module(hhs_realtor_controller, [Req]).
-compile(export_all).
-include(&quot;hhs_config.hrl&quot;).

register(&#39;POST&#39;, []) -&amp;gt;
    log:d(&quot;register post_params: ~p&quot;, [Req:post_params()]),
    Phone = Req:post_param(&quot;phone&quot;),
    Pass = Req:post_param(&quot;pass&quot;),
    log:d(&quot;register: phone=~p, pass=~p&quot;, [Phone, Pass]),
    case boss_db:find(realtor, [phone, equals, Phone]) of
        [_SavedRealtor] -&amp;gt;
            log:w(&quot;realtor with phone ~p already exists!&quot;, [Phone]),
            {json, [{success, false}, {message, &quot;already exists!&quot;}]};
        [] -&amp;gt;
            log:d(&quot;create new realotr: phone=~p, pass=~p&quot;, [Phone, Pass]),
            NewRealtor = realtor:new(id, Phone, &quot;&quot;, user_lib:hash_password(Pass), &quot;&quot;, &quot;&quot;),
            case NewRealtor:save() of   %{ok, SavedBossRecord} | {error, [ErrorMessages]}
                {ok, Saved} -&amp;gt;
                    %{json, #result{success=true, json=Saved}};
                    {json, [{success, true}, {realtor, Saved}]};
                {error, [Errors]} -&amp;gt;
                    {json, [{success, false}, {message, Errors}]}
            end
    end.

login(&#39;POST&#39;, []) -&amp;gt;
    log:d(&quot;login post_params: ~p&quot;, [Req:post_params()]),
    Phone = Req:post_param(&quot;phone&quot;),
    Pass = Req:post_param(&quot;pass&quot;),
    log:d(&quot;login: phone=~p, pass=~p&quot;, [Phone, Pass]),
    case boss_db:find(realtor, [phone, equals, Phone]) of
        [SavedRealtor] -&amp;gt;
            case SavedRealtor:check_password(Pass) of
                true -&amp;gt;
                    %{json, #result{success=true, json=SavedRealtor}};
                    {json, [{success, true}, {realtor, SavedRealtor}]};
                false -&amp;gt;
                    %{json, #result{success=false, message=&quot;wrong password&quot;}}
                    {json, [{success, false}, {message, &quot;wrong password&quot;}]}
            end;
        [] -&amp;gt;
            log:w(&quot;realtor with phone ~p not exists!&quot;, [Phone]),
            {json, [{success, false}, {message, &quot;no account&quot;}]}
    end.
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 05 Feb 2016 00:00:00 +0800</pubDate>
        <link>/chicagoboss-json</link>
        <guid isPermaLink="true">/chicagoboss-json</guid>
        
        
        <category>chicagoboss</category>
        
      </item>
    
      <item>
        <title>erlang gen tcp</title>
        <description>&lt;pre&gt;&lt;code&gt;connect(Address, Port, Options) -&amp;gt; {ok, Socket} | {error, Reason}
connect(Address, Port, Options, Timeout) -&amp;gt;
    {ok, Socket} | {error, Reason}

    Types:

        Address = inet:ip_address() | inet:hostname()
        Port = inet:port_number()
        Options = [connect_option()]
        Timeout = timeout()
        Socket = socket()
        Reason = inet:posix()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client() -&amp;gt;
    SomeHostInNet = &quot;localhost&quot;, % to make it runnable on one machine
    {ok, Sock} = gen_tcp:connect(SomeHostInNet, 5678, [binary, {packet, 0}]),
    ok = gen_tcp:send(Sock, &quot;Some Data&quot;),
    ok = gen_tcp:close(Sock).

server() -&amp;gt;
    {ok, LSock} = gen_tcp:listen(5678, [binary, {packet, 0}, {active, false}]),
    {ok, Sock} = gen_tcp:accept(LSock),
    {ok, Bin} = do_recv(Sock, []),
    ok = gen_tcp:close(Sock),
    Bin.

do_recv(Sock, Bs) -&amp;gt;
    case gen_tcp:recv(Sock, 0) of
        {ok, B} -&amp;gt;
            do_recv(Sock, [Bs, B]);
        {error, closed} -&amp;gt;
            {ok, list_to_binary(Bs)}
    end.
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 29 Jan 2016 00:00:00 +0800</pubDate>
        <link>/gen_tcp</link>
        <guid isPermaLink="true">/gen_tcp</guid>
        
        
        <category>erlang</category>
        
      </item>
    
  </channel>
</rss>
